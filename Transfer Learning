import os
import time
from tqdm import tqdm

import pandas as pd
import numpy as np

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
from torch.optim import lr_scheduler
from torchvision import datasets, transforms
import matplotlib.pyplot as plt

# 获取计算硬件
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
print(f'Device: {device}')

# 图像预处理配置
def get_transforms():
    """
    返回训练集和测试集的图像预处理流水线。
    """
    train_transform = transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])

    test_transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    return train_transform, test_transform

# 数据集加载器配置
def load_data(dataset_dir, train_transform, test_transform, batch_size=32):
    """
    载入训练集和测试集数据并返回 DataLoader。
    """
    train_path = os.path.join(dataset_dir, 'train')
    test_path = os.path.join(dataset_dir, 'val')

    print(f'训练集路径: {train_path}')
    print(f'测试集路径: {test_path}')

    # 载入数据集
    train_dataset = datasets.ImageFolder(train_path, train_transform)
    test_dataset = datasets.ImageFolder(test_path, test_transform)

    print(f'训练集图像数量: {len(train_dataset)}')
    print(f'类别个数: {len(train_dataset.classes)}')
    print(f'各类别名称: {train_dataset.classes}')
    print(f'测试集图像数量: {len(test_dataset)}')
    print(f'类别个数: {len(test_dataset.classes)}')
    print(f'各类别名称: {test_dataset.classes}')
    
    # 数据加载器
    train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)
    test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=4)
    
    return train_loader, test_loader, train_dataset, test_dataset

# 获取模型
def get_model(n_class):
    """
    获取并返回一个AlexNet模型，替换最后的全连接层。
    """
    model = torchvision.models.AlexNet(pretrained=False)
    model.fc = nn.Linear(model.fc.in_features, n_class)
    model = model.to(device)
    return model

# 设置超参数和路径
dataset_dir = '/path/to/your/dataset'
BATCH_SIZE = 32

# 获取预处理操作
train_transform, test_transform = get_transforms()

# 加载数据
train_loader, test_loader, train_dataset, test_dataset = load_data(dataset_dir, train_transform, test_transform, BATCH_SIZE)

# 获取类别数量
n_class = len(train_dataset.classes)

# 获取模型
model = get_model(n_class)

# 优化器设置
optimizer = optim.Adam(model.parameters())

# 打印模型概述
print(model)
